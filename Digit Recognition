import torch
import torchvision
from torchvision import transforms , datasets

train = datasets.MNIST('', train=True , download=True, transform=transforms.Compose([transforms.ToTensor()]))
test = datasets.MNIST('', train=False , download=True, transform=transforms.Compose([transforms.ToTensor()]))


trainset=torch.utils.data.DataLoader(train , batch_size=10, shuffle=True)
testset=torch.utils.data.DataLoader(test , batch_size=10, shuffle=True)
import torch.nn as nn 
import torch.nn.functional as F
class Net(nn.Module):

  def _init_(self):           #initializing 4 neuron layers
    super()._init_()
    self.fc1 = nn.Linear(28*28 , 64)
    self.fc2 = nn.Linear(64 , 64)
    self.fc3 = nn.Linear(64 , 64)
    self.fc4 = nn.Linear(64 , 10)

  def forward(self, x):               #feedforward data
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = F.relu(self.fc3(x))
    x = self.fc4(x)

    return F.log_softmax(x, dim=1)       #softmax function

    return x
    


net = Net()
print(net)
#passing data throught the network

X = torch.rand((28*28))
X = X.view(-1,28*28)   # -1 says that it can be any function so error doesnot show
output = net(X)
output
#training the data
import torch.optim as optim 

optimizer = optim.Adam(net.parameters(), lr=0.001)

EPOCHS = 3

for epoch in range(EPOCHS):
  for data in trainset:
    #data is a batch of features and labels.
    X, y = data
    net.zero_grad()
    output = net(X.view(-1,28*28))
    loss = F.nll_loss(output, y)
    loss.backward()
    optimizer.step()
  print(loss)
  #testing the accuracy
correct = 0
total = 0

with torch.no_grad():
  for data in trainset:
    X, y = data
    output = net(X.view(-1, 28*28))
    for idx, i in enumerate(output):      
      if torch.argmax(i) == y[idx]:
        correct += 1
      total += 1

print("Accuracy", round(correct/total*100 , 3),"%")
import matplotlib.pyplot as plt
plt.imshow(X[1].view(28,28))
plt.show()
print(torch.argmax(net(X[1].view(-1,28*28))[0]))
